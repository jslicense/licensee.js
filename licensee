#!/usr/bin/env node
var access = require('fs-access')
var docopt = require('docopt')
var fs = require('fs')
var path = require('path')
var validSPDX = require('spdx-expression-validate')

var USAGE = [
  'Check npm package dependency license metadata against rules.',
  '',
  'Usage: licensee [options]',
  '',
  'Options:',
  '  --license EXPRESSION  Permit licenses matching SPDX expression.',
  '  --whitelist LIST      Permit comma-delimited name@range.',
  '  --errors-only         Only show NOT APPROVED packages.',
  '  --quiet               Quiet mode, only exit(0/1).',
  '  -h, --help            Print this screen to standard output.',
  '  -v, --version         Print version to standard output.'
].join('\n')

var options = docopt.docopt(USAGE, {
  version: require('./package.json').version
})

var cwd = process.cwd()
var configuration

if (options['--license'] || options['--whitelist']) {
  configuration = {
    license: options['--license'] || undefined,
    whitelist: options['--whitelist']
      ? options['--whitelist']
        .split(',')
        .map(function (string) {
          return string.trim()
        })
        .reduce(function (whitelist, string) {
          var split = string.split('@')
          whitelist[split[0]] = split[1]
          return whitelist
        }, {})
      : {}
  }
  checkDependencies()
} else {
  var configurationPath = path.join(cwd, '.licensee.json')
  access(configurationPath, function (error) {
    if (error) {
      die('Cannot read ' + configurationPath)
    } else {
      fs.readFile(configurationPath, function (error, data) {
        if (error) {
          die('Error reading ' + configurationPath)
        } else {
          try {
            configuration = JSON.parse(data)
          } catch (error) {
            die('Error parsing ' + configurationPath)
          }
          checkDependencies()
        }
      })
    }
  })
}

function checkDependencies () {
  require('./')(configuration, cwd, function (error, dependencies) {
    if (error) {
      die(error.message + '\n')
    } else {
      if (dependencies.length === 0) {
        process.exit(0)
      } else {
        var haveIssue = false
        dependencies.forEach(function (dependency) {
          var hideNonError = function () {
            return options['--errors-only']
          }
          var isApproved = function () {
            return dependency.approved
          }
          var isQuiet = function () {
            return !!options['--quiet']
          }
          var printResult = function () {
            process.stdout.write(formatResult(dependency) + '\n')
          }

          if (!isApproved()) {
            haveIssue = true
          }

          if (isQuiet()) {
            return
          }

          if (!isApproved()) {
            printResult()
          } else if (!hideNonError()) {
            printResult()
          }
        })
        process.exit(haveIssue ? 1 : 0)
      }
    }
  })
}

function formatResult (result) {
  return (
    result.name + '@' + result.version + '\n' +
    (
      result.approved
      ? (
        '  Approved by ' +
        (result.whitelisted ? 'whitelist' : 'rule') + '\n'
      )
      : '  NOT APPROVED\n'
    ) +
    '  Terms: ' + displayLicense(result.license) + '\n' +
    '  Repository: ' + formatRepo(result.repository) + '\n' +
    '  Homepage: ' + formatRepo(result.homepage) + '\n' +
    '  Author: ' + formatPerson(result.author) + '\n' +
    '  Contributors:' + formatPeople(result.contributors) + '\n'
  )
}

function displayLicense (license) {
  if (typeof license === 'string') {
    if (validSPDX(license)) {
      return license
    } else {
      return 'Invalid SPDX expression "' + license + '"'
    }
  } else if (Array.isArray(license)) {
    return JSON.stringify(license)
  } else {
    return 'Invalid license metadata'
  }
}

function formatPeople (people) {
  if (Array.isArray(people)) {
    return '\n' + people
      .map(function (person) {
        return '    ' + formatPerson(person)
      })
      .join('\n')
  } else if (typeof people === 'string') {
    return ' ' + people
  } else {
    return ' None listed'
  }
}

function formatPerson (person) {
  if (!person) {
    return 'None listed'
  } else if (typeof person === 'string') {
    return person
  } else {
    return (
      person.name +
      (person.email ? ' <' + person.email + '>' : '') +
      (person.url ? ' (' + person.url + ')' : '')
    )
  }
}

function formatRepo (repo) {
  if (repo) {
    if (typeof repo === 'string') {
      return repo
    } else if (repo.hasOwnProperty('url')) {
      return repo.url
    }
  } else {
    return 'None listed'
  }
}

function die (message) {
  process.stderr.write(message + '\n')
  process.exit(1)
}
